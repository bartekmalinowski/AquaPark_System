// <auto-generated />
using System;
using AquaparkApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AquaparkApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250619121842_AddOpisToLogDostepu")]
    partial class AddOpisToLogDostepu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AquaparkApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Atrakcja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CenaDodatkowa")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cenaDodatkowa");

                    b.Property<int>("MaxOsób")
                        .HasColumnType("int")
                        .HasColumnName("maxOsób");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis");

                    b.Property<bool>("WymagaDodatkowejOplaty")
                        .HasColumnType("bit")
                        .HasColumnName("wymagaDodatkowejOplaty");

                    b.HasKey("Id");

                    b.ToTable("Atrakcja");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Bramka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazwa");

                    b.Property<string>("TypBramki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("typBramki");

                    b.HasKey("Id");

                    b.ToTable("Bramka");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Kara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataNaliczenia")
                        .HasColumnType("datetime")
                        .HasColumnName("dataNaliczenia");

                    b.Property<decimal>("Kwota")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("kwota");

                    b.Property<int?>("OfertaId")
                        .HasColumnType("int")
                        .HasColumnName("oferta_id");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("opis");

                    b.Property<string>("StatusPlatnosci")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("statusPlatnosci");

                    b.Property<int>("TypKaryId")
                        .HasColumnType("int")
                        .HasColumnName("typKary_id");

                    b.Property<int>("WizytaId")
                        .HasColumnType("int")
                        .HasColumnName("wizyta_id");

                    b.HasKey("Id");

                    b.HasIndex("OfertaId");

                    b.HasIndex("TypKaryId");

                    b.HasIndex(new[] { "WizytaId" }, "IX_Kara_Wizyta");

                    b.ToTable("Kara");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Klient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Imię")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("imię");

                    b.Property<string>("Nazwisko")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazwisko");

                    b.Property<string>("NrTelefonu")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nrTelefonu");

                    b.HasKey("Id");

                    b.ToTable("Klient");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.LogDostepu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BramkaId")
                        .HasColumnType("int")
                        .HasColumnName("bramka_id");

                    b.Property<DateTime>("CzasZdarzenia")
                        .HasColumnType("datetime")
                        .HasColumnName("czasZdarzenia");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("opis");

                    b.Property<string>("TypZdarzenia")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("typZdarzenia");

                    b.Property<int>("WizytaId")
                        .HasColumnType("int")
                        .HasColumnName("wizyta_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BramkaId" }, "IX_LogDostepu_Bramka");

                    b.HasIndex(new[] { "WizytaId" }, "IX_LogDostepu_Wizyta");

                    b.ToTable("LogDostepu");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.OfertaCennikowa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaPodstawowa")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cenaPodstawowa");

                    b.Property<decimal?>("KaraZaMinutePrzekroczenia")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("karaZaMinutePrzekroczenia");

                    b.Property<int?>("LiczbaWejsc")
                        .HasColumnType("int")
                        .HasColumnName("liczbaWejsc");

                    b.Property<int?>("LimitCzasuMinuty")
                        .HasColumnType("int")
                        .HasColumnName("limitCzasuMinuty");

                    b.Property<string>("NazwaOferty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nazwaOferty");

                    b.Property<DateTime?>("ObowiazujeDo")
                        .HasColumnType("datetime")
                        .HasColumnName("obowiazujeDo");

                    b.Property<DateTime>("ObowiazujeOd")
                        .HasColumnType("datetime")
                        .HasColumnName("obowiazujeOd");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("opis");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("typ");

                    b.HasKey("Id");

                    b.ToTable("OfertaCennikowa");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Opaska", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataWycofania")
                        .HasColumnType("datetime")
                        .HasColumnName("dataWycofania");

                    b.Property<DateTime?>("DataWydania")
                        .HasColumnType("datetime")
                        .HasColumnName("dataWydania");

                    b.Property<string>("NumerOpaski")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numerOpaski");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NumerOpaski" }, "UQ_Opaska_NumerOpaski")
                        .IsUnique();

                    b.ToTable("Opaska");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Platnosc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataPlatnosci")
                        .HasColumnType("datetime")
                        .HasColumnName("dataPlatnosci");

                    b.Property<int?>("KlientId")
                        .HasColumnType("int")
                        .HasColumnName("klient_id");

                    b.Property<decimal>("KwotaCalkowita")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("kwotaCalkowita");

                    b.Property<string>("MetodaPlatnosci")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("metodaPlatnosci");

                    b.Property<string>("StatusPlatnosci")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("statusPlatnosci");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KlientId" }, "IX_Platnosc_Klient")
                        .HasFilter("([klient_id] IS NOT NULL)");

                    b.ToTable("Platnosc");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.PozycjaPlatnosci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KaraId")
                        .HasColumnType("int")
                        .HasColumnName("kara_id");

                    b.Property<decimal>("KwotaPozycji")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("kwotaPozycji");

                    b.Property<string>("OpisPozycji")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("opisPozycji");

                    b.Property<int>("PlatnoscId")
                        .HasColumnType("int")
                        .HasColumnName("platnosc_id");

                    b.Property<int?>("ProduktZakupionyId")
                        .HasColumnType("int")
                        .HasColumnName("produktZakupiony_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KaraId" }, "IX_PozycjaPlatnosci_Kara")
                        .HasFilter("([kara_id] IS NOT NULL)");

                    b.HasIndex(new[] { "PlatnoscId" }, "IX_PozycjaPlatnosci_Platnosc");

                    b.HasIndex(new[] { "ProduktZakupionyId" }, "IX_PozycjaPlatnosci_Produkt")
                        .HasFilter("([produktZakupiony_id] IS NOT NULL)");

                    b.ToTable("PozycjaPlatnosci");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.ProduktZakupiony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaZakupu")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cenaZakupu");

                    b.Property<DateTime>("DataZakupu")
                        .HasColumnType("datetime")
                        .HasColumnName("dataZakupu");

                    b.Property<int>("KlientId")
                        .HasColumnType("int")
                        .HasColumnName("klient_id");

                    b.Property<int>("OfertaId")
                        .HasColumnType("int")
                        .HasColumnName("oferta_id");

                    b.Property<int?>("PozostaloWejsc")
                        .HasColumnType("int")
                        .HasColumnName("pozostaloWejsc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("WaznyDo")
                        .HasColumnType("datetime")
                        .HasColumnName("waznyDo");

                    b.Property<DateTime?>("WaznyOd")
                        .HasColumnType("datetime")
                        .HasColumnName("waznyOd");

                    b.Property<int?>("ZnizkaId")
                        .HasColumnType("int")
                        .HasColumnName("znizka_id");

                    b.HasKey("Id");

                    b.HasIndex("ZnizkaId");

                    b.HasIndex(new[] { "KlientId" }, "IX_ProduktZakupiony_Klient");

                    b.HasIndex(new[] { "OfertaId" }, "IX_ProduktZakupiony_Oferta");

                    b.ToTable("ProduktZakupiony");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.StatusWizyty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("opis");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nazwa" }, "UQ_StatusWizyty_Nazwa")
                        .IsUnique();

                    b.ToTable("StatusWizyty");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.TypKary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DomyslnaKwota")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("domyslnaKwota");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nazwa");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("opis");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nazwa" }, "UQ_TypKary_Nazwa")
                        .IsUnique();

                    b.ToTable("TypKary");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Wizyta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CzasWejscia")
                        .HasColumnType("datetime")
                        .HasColumnName("czasWejscia");

                    b.Property<DateTime?>("CzasWyjscia")
                        .HasColumnType("datetime")
                        .HasColumnName("czasWyjscia");

                    b.Property<int>("KlientId")
                        .HasColumnType("int")
                        .HasColumnName("klient_id");

                    b.Property<int>("OpaskaId")
                        .HasColumnType("int")
                        .HasColumnName("opaska_id");

                    b.Property<DateTime?>("PlanowanyCzasWyjscia")
                        .HasColumnType("datetime")
                        .HasColumnName("planowanyCzasWyjscia");

                    b.Property<int>("ProduktZakupionyId")
                        .HasColumnType("int")
                        .HasColumnName("produktZakupiony_id");

                    b.Property<int>("StatusWizytyId")
                        .HasColumnType("int")
                        .HasColumnName("statusWizyty_id");

                    b.HasKey("Id");

                    b.HasIndex("StatusWizytyId");

                    b.HasIndex(new[] { "OpaskaId" }, "IX_Wizyta_AktywnaOpaskaUnikalna")
                        .IsUnique()
                        .HasFilter("[statusWizyty_id]=(1)");

                    b.HasIndex(new[] { "KlientId" }, "IX_Wizyta_Klient");

                    b.HasIndex(new[] { "ProduktZakupionyId" }, "IX_Wizyta_Produkt");

                    b.ToTable("Wizyta", (string)null);
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Znizka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzyAktywna")
                        .HasColumnType("bit")
                        .HasColumnName("czyAktywna");

                    b.Property<string>("KodZnizki")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("kodZnizki");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("opis");

                    b.Property<string>("TypZnizki")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("typZnizki");

                    b.Property<decimal>("Wartosc")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("wartosc");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KodZnizki" }, "UQ_Znizka_KodZnizki")
                        .IsUnique();

                    b.ToTable("Znizka");
                });

            modelBuilder.Entity("AtrakcjaBramka", b =>
                {
                    b.Property<int>("AtrakcjaId")
                        .HasColumnType("int");

                    b.Property<int>("BramkaId")
                        .HasColumnType("int");

                    b.HasKey("AtrakcjaId", "BramkaId");

                    b.ToTable("AtrakcjaBramka");
                });

            modelBuilder.Entity("DostepAtrakcjiBramka", b =>
                {
                    b.Property<int>("BramkaId")
                        .HasColumnType("int")
                        .HasColumnName("bramka_id");

                    b.Property<int>("AtrakcjaId")
                        .HasColumnType("int")
                        .HasColumnName("atrakcja_id");

                    b.HasKey("BramkaId", "AtrakcjaId");

                    b.HasIndex("AtrakcjaId");

                    b.ToTable("DostepAtrakcjiBramka", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Kara", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.OfertaCennikowa", "Oferta")
                        .WithMany("Kary")
                        .HasForeignKey("OfertaId")
                        .HasConstraintName("FK_Kara_OfertaCennikowa");

                    b.HasOne("AquaparkApp.Data.Models.TypKary", "TypKary")
                        .WithMany("Kary")
                        .HasForeignKey("TypKaryId")
                        .IsRequired()
                        .HasConstraintName("FK_Kara_TypKary");

                    b.HasOne("AquaparkApp.Data.Models.Wizyta", "Wizyta")
                        .WithMany("Kary")
                        .HasForeignKey("WizytaId")
                        .IsRequired()
                        .HasConstraintName("FK_Kara_Wizyta");

                    b.Navigation("Oferta");

                    b.Navigation("TypKary");

                    b.Navigation("Wizyta");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.LogDostepu", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Bramka", "Bramka")
                        .WithMany("LogiDostepu")
                        .HasForeignKey("BramkaId")
                        .IsRequired()
                        .HasConstraintName("FK_LogDostepu_Bramka");

                    b.HasOne("AquaparkApp.Data.Models.Wizyta", "Wizyta")
                        .WithMany("LogiDostepu")
                        .HasForeignKey("WizytaId")
                        .IsRequired()
                        .HasConstraintName("FK_LogDostepu_Wizyta");

                    b.Navigation("Bramka");

                    b.Navigation("Wizyta");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Platnosc", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Klient", "Klient")
                        .WithMany("Platnosci")
                        .HasForeignKey("KlientId")
                        .HasConstraintName("FK_Platnosc_Klient");

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.PozycjaPlatnosci", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Kara", "Kara")
                        .WithMany("PozycjePlatnosci")
                        .HasForeignKey("KaraId")
                        .HasConstraintName("FK_PozycjaPlatnosci_Kara");

                    b.HasOne("AquaparkApp.Data.Models.Platnosc", "Platnosc")
                        .WithMany("PozycjePlatnosci")
                        .HasForeignKey("PlatnoscId")
                        .IsRequired()
                        .HasConstraintName("FK_PozycjaPlatnosci_Platnosc");

                    b.HasOne("AquaparkApp.Data.Models.ProduktZakupiony", "ProduktZakupiony")
                        .WithMany("PozycjePlatnosci")
                        .HasForeignKey("ProduktZakupionyId")
                        .HasConstraintName("FK_PozycjaPlatnosci_ProduktZakupiony");

                    b.Navigation("Kara");

                    b.Navigation("Platnosc");

                    b.Navigation("ProduktZakupiony");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.ProduktZakupiony", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Klient", "Klient")
                        .WithMany("ProduktyZakupione")
                        .HasForeignKey("KlientId")
                        .IsRequired()
                        .HasConstraintName("FK_ProduktZakupiony_Klient");

                    b.HasOne("AquaparkApp.Data.Models.OfertaCennikowa", "Oferta")
                        .WithMany("ProduktyZakupione")
                        .HasForeignKey("OfertaId")
                        .IsRequired()
                        .HasConstraintName("FK_ProduktZakupiony_OfertaCennikowa");

                    b.HasOne("AquaparkApp.Data.Models.Znizka", "Znizka")
                        .WithMany("ProduktyZakupione")
                        .HasForeignKey("ZnizkaId")
                        .HasConstraintName("FK_ProduktZakupiony_Znizka");

                    b.Navigation("Klient");

                    b.Navigation("Oferta");

                    b.Navigation("Znizka");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Wizyta", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Klient", "Klient")
                        .WithMany("Wizyty")
                        .HasForeignKey("KlientId")
                        .IsRequired()
                        .HasConstraintName("FK_Wizyta_Klient");

                    b.HasOne("AquaparkApp.Data.Models.Opaska", "Opaska")
                        .WithMany("Wizyty")
                        .HasForeignKey("OpaskaId")
                        .IsRequired()
                        .HasConstraintName("FK_Wizyta_Opaska");

                    b.HasOne("AquaparkApp.Data.Models.ProduktZakupiony", "ProduktZakupiony")
                        .WithMany("Wizyty")
                        .HasForeignKey("ProduktZakupionyId")
                        .IsRequired()
                        .HasConstraintName("FK_Wizyta_ProduktZakupiony");

                    b.HasOne("AquaparkApp.Data.Models.StatusWizyty", "StatusWizyty")
                        .WithMany("Wizyty")
                        .HasForeignKey("StatusWizytyId")
                        .IsRequired()
                        .HasConstraintName("FK_Wizyta_StatusWizyty");

                    b.Navigation("Klient");

                    b.Navigation("Opaska");

                    b.Navigation("ProduktZakupiony");

                    b.Navigation("StatusWizyty");
                });

            modelBuilder.Entity("DostepAtrakcjiBramka", b =>
                {
                    b.HasOne("AquaparkApp.Data.Models.Atrakcja", null)
                        .WithMany()
                        .HasForeignKey("AtrakcjaId")
                        .IsRequired()
                        .HasConstraintName("FK_DostepAtrakcjiBramka_Atrakcja");

                    b.HasOne("AquaparkApp.Data.Models.Bramka", null)
                        .WithMany()
                        .HasForeignKey("BramkaId")
                        .IsRequired()
                        .HasConstraintName("FK_DostepAtrakcjiBramka_Bramka");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AquaparkApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AquaparkApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AquaparkApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AquaparkApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Bramka", b =>
                {
                    b.Navigation("LogiDostepu");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Kara", b =>
                {
                    b.Navigation("PozycjePlatnosci");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Klient", b =>
                {
                    b.Navigation("Platnosci");

                    b.Navigation("ProduktyZakupione");

                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.OfertaCennikowa", b =>
                {
                    b.Navigation("Kary");

                    b.Navigation("ProduktyZakupione");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Opaska", b =>
                {
                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Platnosc", b =>
                {
                    b.Navigation("PozycjePlatnosci");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.ProduktZakupiony", b =>
                {
                    b.Navigation("PozycjePlatnosci");

                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.StatusWizyty", b =>
                {
                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.TypKary", b =>
                {
                    b.Navigation("Kary");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Wizyta", b =>
                {
                    b.Navigation("Kary");

                    b.Navigation("LogiDostepu");
                });

            modelBuilder.Entity("AquaparkApp.Data.Models.Znizka", b =>
                {
                    b.Navigation("ProduktyZakupione");
                });
#pragma warning restore 612, 618
        }
    }
}
