@page "/symulator-bramek"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin, Pracownik")]
@rendermode InteractiveServer

@inject IWizytaService WizytaService

<PageTitle>Symulator Bramek</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header text-center">
                    <h3><span class="bi bi-qr-code-scan"></span> Symulator Bramek Dostępowych</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="opaskaInput" class="form-label">Numer Opaski (zeskanuj lub wpisz)</label>
                        <input id="opaskaInput" @bind="numerOpaski" class="form-control form-control-lg" placeholder="np. RFID001" />
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-lg btn-success" @onclick="HandleWejscie" disabled="@string.IsNullOrWhiteSpace(numerOpaski)">
                            <span class="bi bi-box-arrow-in-right"></span> Zarejestruj Wejście
                        </button>
                        <button class="btn btn-lg btn-danger" @onclick="HandleWyjscie" disabled="@string.IsNullOrWhiteSpace(numerOpaski)">
                            <span class="bi bi-box-arrow-out-right"></span> Zarejestruj Wyjście
                        </button>
                    </div>

                    @if (komunikat != null)
                    {
                        <div class="alert @(czyBlad ? "alert-danger" : "alert-success") mt-4">
                            @((MarkupString)komunikat)
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? numerOpaski;
    private string? komunikat;
    private bool czyBlad;

    private async Task HandleWejscie()
    {
        if (string.IsNullOrWhiteSpace(numerOpaski)) return;

        try
        {
            var wizyta = await WizytaService.ZarejestrujWejscieAsync(numerOpaski);
            czyBlad = false;
            komunikat = $"<b>Wejście zarejestrowane!</b><br>Klient ID: {wizyta.KlientId}<br>Czas: {wizyta.CzasWejscia:g}";
        }
        catch (Exception ex)
        {
            czyBlad = true;
            komunikat = $"<b>Błąd wejścia:</b> {ex.Message}";
        }
    }

    private async Task HandleWyjscie()
    {
        if (string.IsNullOrWhiteSpace(numerOpaski)) return;

        try
        {
            var wizyta = await WizytaService.ZarejestrujWyjscieAsync(numerOpaski);
            czyBlad = false;
            komunikat = $"<b>Wyjście zarejestrowane!</b><br>Klient ID: {wizyta.KlientId}<br>Czas: {wizyta.CzasWyjscia:g}";
        }
        catch (Exception ex)
        {
            czyBlad = true;
            komunikat = $"<b>Błąd wyjścia:</b> {ex.Message}";
        }
    }
}